// САМОЕ ВАЖНОЕ В JS: выражения,функции и обьекты
// практически все сущьности в js - обьекты
// обьект -набор свойств "имя:значение"
// пример обьекта :
/* {
    visible: true, -  ключь:значение
    colorDepth: 24, -  ключь:значение
    title: 'My Image', -  ключь:значение
    orientation: {   - вложеный обьект со своими значениями
        angle: 0, 
        type: 'landscape'
    },
    pixelDepthL: 24, -  ключь:значение
    wigth: 1440 -  ключь:значение
} */

// массив - это обьект.
// функция - это обьект.
// чиссло и строка - ведут себя как обьекты.

// console.log(..)
// console - это обьект.
// log -это метод,ф-ия которая яв-ся значением одного из свойст обьекта.
// точка между console и log - это синтаксис js , точечная запись.с помощью точечной записи можно получать доступ к методу.
// в данном случае мы получаем доступ к методу log.
// () - вызов метода.часть синтаксиса js.
// внутри вызова метода находиться аргумент.в данном случае значение типа string(строка).

// любая ф-ция в js это обьект.

// ----------

// ВЫРАЖЕНИЯ
// 'abc' // abc
// 10 // 10
// 5 + 2 // 7
// c = 10 // 10
// 'Good ' + 'Evening' // Good Evening  - конкотинация
// a <= b || c! == d // true или false
// myFunctrion(a, b)

// выражения присвоения
// с = 10 - переменной с присваиваем значение 10

// выражения с побочными действиями
// - не только возыращает значение,но и выполняет другие действия
// a = 5 - вернет значение 5
// b++ - ++ - увеличивает зхначение на единицу

// --------

// ПЕРЕМЕННЫЕ
//перменные дают возможность повторного доступа к заначениям
//переменная это как коробка,в нее можно положить любое значение
//контейнеры для хранения значений

//имена переменных:
// PascalCase - типы и классы
// DB_PASSWORD - значения известны до запуска приложения и не меняються.например для паролей
// camelCase - все остальные переменные

// название переменных должны быть понятными

// обьявление переменных:
// let const var
// let -можно изменять
// const -значение менять нельзя
// var - устарел не использолвать

// let = a  - притсваивать значение можно и позже
// a + 10   - присвоение

// const a = 10   - значение присваиваеться сразу и не может меняться

// тип переменной опрелделяеться типом присвеоенного значения

// примитивные типы:
// const a = 10    - number /число
// const b = "abc" - string /строка
// const c = true  - boolean /булевое значение
// null
// undefined
// symbol(символ)

// ссылочный тип
// object(обьект)
// обьект это набор свойств

// let c = {a:10,b:true}
// переменная "c" будет хранить ссылку на область памяти где находиться этот обьект

// let c = { a: 10, b: true }
// let d = { a: 10, b: true }
// можно иметь две разных переменных на один и тот же обьект
// также можно иметь две разных функции с одним обьектом

// const objectA = { a: 1, b: true };
// objectA.a = 2;
// const copyotA = objectA;
// copyotA.a = 5;
// // через точку можно либо изменять либо добавлять обьекты
// copyotA.c = 555;
// console.log(copyotA);
// console.log(objectA);

// динамическая типизация
// js динамически типизируемый язык
// зпначение переменной number можно поменять на string,boolean
// let a = 10
// a = true
// a = 'Alex'
// a = undefined

// function a() {
//     console.log('hello world');
// }
// a() - вызвали в консоли
//если изменить значение функуци то вы больше не сможете ее вызвать.получите ошибку
//a = 10

// const нужно использовать везде где возможно
// const позволит предотвратить возможные проблемы,связанные с динамической типизацией

// обьявлените переменной с помощью const
// () =>  - стрелочная функция
// const a = () => {
//     console.log('Hey there');
// }
// a() // вызов функции
// a = 10 //получите ошибку
// пременной НЕЛЬЗЯ присвоить новое значение

// js динамически типизируемый язык

// правила работы с переменными:
// все перменные обьявлять перед их использованием,
// стараться использовать const везде,где это возможно.

// -------

// ОБЬЕКТЫ

// все сущьности  в js это - обьекты
// являються либо обьектами явно либо ведут себя как обьекты

// обьект - это набор свойств "имя:значение"
// обьект - это тип значений
// обьект - это тип пременных

// обьект  это ссылочный тип, и пременная которой вы присваиваете содержит только ссылку на обьект который находиться в другом месте памяти

// структура и синтаксис
// const myCity = {
//     city: "New York", // свойство: значение свойства
//     popular: true, // свойство: значение свойства
//     country: "USA", // свойство: значение свойства
// };

// порядок свойст в обьекта не имеет значения :

// const myCity = {
//     city: "New York", // свойство: значение свойства
//     popular: true, // свойство: значение свойства
//     country: "USA", // свойство: значение свойства
// };

// const myCity = {
//     popular: true, // свойство: значение свойства
//     city: "New York", // свойство: значение свойства
//     country: "USA", // свойство: значение свойства
// };

// получение значений свойств через точку
// точечная запись (dot notation)

// const myCity = {
//     city: "New York", // свойство: значение свойства
//     popular: true, // свойство: значение свойства
//     country: "USA", // свойство: значение свойства
// };

// console.log(myCity.city); // New York
// console.log(myCity.popular); // true

// myCity.city = 'Las Vegas';
// console.log(myCity.city); // Las Vegas
// // используя точечьную записm можно менять значения тех или иных свойст

// // также можно бобавлять новые свойства
// console.log(myCity); // {city: 'Las Vegas', popular: true, country: 'USA'}
// myCity.men = 154;
// console.log(myCity); // {city: 'Las Vegas', popular: true, country: 'USA', men: 154}

// // также можно удалять свойства
// console.log(myCity); // {city: 'Las Vegas', popular: true, country: 'USA', men: 154}
// delete myCity.men;
// console.log(myCity); //{city: 'Las Vegas', popular: true, country: 'USA'}

// доступ к знасчениям свойства с использованием квадратных скобок
// const myCity = {
//     city: "New York",
// };
// // добавление свойства через квадратные скобки
// myCity["popular"] = true;
// console.log(myCity);

// // добавление свойства - 'country'
// const countryPropertyName = "country";
// // добавление значения свойства
// myCity[countryPropertyName] = "USA";
// console.log(myCity);
// нужно сначала перменную со свойством,и потом определить ему значение
// через точечьную запись так не получиться

// скобочная запись - BRACKET NOTATION

// отличие скобочной от точечьной.в скобочной можно использовать любое выражение js

// также можно и удалять обьекты
// delete myCity[countryPropertyName]
// console.log(myCity);

// вложенные обьекты
// const myCity = {
//     city: "New York",
//     info: {
//         isPopular: true,
//         country: "USA",
//     },
// };
// // чтобы добрптьстя до занения свойства нужно использовать несколько точек
// console.log(myCity.info.isPopular); // true

// // также можно удалять свойства
// delete myCity.info['isPopular'];
// console.log(myCity);

// запись с квадратными скобками использовать только для выражнений.например названия переменной.

// использование переменных при формировании обьекта
// const nameUser = "Alex";
// const postsQty = 23;

// const userProfile = {
//     nameUser: nameUser,
//     postsQty: postsQty,
//     hasSignerAgreement: false,
// };
// можно написать сокращенно
// если св-во присвоены определенным переменным то можно сослаться на эти переменные
// const nameUser = "Alex";
// const postsQty = 23;

// const userProfile = {
//     nameUser,
//     postsQty,
//     hasSignerAgreement: false,
// };
// console.log(userProfile);

// ---------

// ГЛОБАЛЬНЫЕ ОБЬЕКТЫ
// WINDOW -  присутсвуе в браузерах
// global - присутсвует в node js

// унифицированый глобальный обдьект - globalThis
// globalThis = WINDOW или global
// globalThis - универсальный 
// globalThis - в браузере обозначает WINDOW
// globalThis - в node js обозначает global

// свойства глобальных обьектов
// console   window.console   global.console
// console это глобальный ообьект в зависимомсти от того где вы его используете
// console.log(10);   // 10
// window.console.log(10); // 10
// console.log(10) равносильно window.console.log(10)
// console.log(10) равносильно dlobal.console.log(10)


// МЕТОДЫ
// МЕТОД - сво-во обьекта,значение которого - функция